1) Define states & transitions (the “map”)

Override: ConfigureStateMachineAsync in your workflow class.
Add states, transitions, and entry actions (e.g., start replicators, fire triggers).

2) Initialize when a workflow starts

Hook: OnWorkflowActivatedAsync to preload context/metadata when StartAsync is called (before first transition).

Optional: OnWorkflowStartedAsync for post-start actions (after first Start trigger).

3) Persist workflow state & context

Who saves: SaveWorkflowStateAsync → WorkflowService.UpdateStateAsync (serializes context, updates phase & outcome).
You normally don’t call the service directly; call SaveWorkflowStateAsync.

4) Resume from DB (API calls, app restarts)

Method: RehydrateAsync — restores WorkflowContext, WorkflowId, and the current phase into the state machine.
Put any “reconnect” logic around this if needed.

5) Move the workflow forward (events)

Method: TriggerTransitionAsync — call when “something happened” (task completed, approval given).
It queues the trigger, runs transitions, and (by default) commits state. Use autoCommit: false for batch flows.

6) Support mid‑flight modifications (add/remove assignees, etc.)

Expose current modifiable data: override OnWorkflowModification() to return JSON the UI can edit; GetModificationContext() returns it to the API.

Apply incoming changes: override OnWorkflowModifiedAsync(payload); compare payload with WorkflowContext and mutate context/replicator items; return true to persist.
See concrete example in ApprovalWorkflow (prunes + re-seeds replicator items).

7) Create user tasks (per activity)

Base: derive from UserTaskActivity. Set fields in OnExecuteTask() (title, outcome placeholder, etc.).
The base will write “TaskCreated” history and call TaskService.CreateAsync.

When you start activities: your workflow builds a WorkflowActivityContext and the replicator calls CreateChildActivity.
Override this hook in your workflow to return the right activity (e.g., ApprovalTaskActivity, SigningTaskActivity).
This replaces the old provider-based pattern.

8) React to user task updates (approve/reject/delegate) — minor refinement

Override: OnTaskChangedAsync(payload) in your concrete activity.
Update Context.Storage, set IsCompleted, TaskStatus, raise history events, and set flags for workflow logic (e.g., IsTaskRejected).
Example: ApprovalTaskActivity sets outcome and writes proper history.
This method is invoked when the workflow processes an API call (AlterTaskAsync → OnTaskAlteredAsync), so you only need to handle your activity’s domain-specific logic here.

9) Wire task updates back into workflow decisions

Hook: OnChildCompleted(phaseId, activity) — called whenever a user task activity finishes.
Use it to integrate activity outcomes into WorkflowContext (e.g., set AnyTaskRejected, inject new items if a task was delegated).
For example, in ApprovalWorkflow.OnChildCompleted you either flag rejection or insert a new ReplicatorItem if delegation occurred.

State transition: after all children complete, the replicator fires a trigger (AllTasksCompleted) to move to the next state or to completion.
The dynamic decision is configured in ConfigureStateMachineAsync.

10) Alter an existing task from outside (API-driven) — refinement

Entry point (workflow level): ActivityWorkflowBase.AlterTaskAsync(...) → builds WorkflowActivityContext and calls OnTaskAlteredAsync.
The workflow then uses CreateChildActivity to reconstruct the correct activity type, calls ChangedTaskAsync on it, and if the task finished, invokes OnChildCompleted and continues the replicator phase.
This is the mechanism for applying API-driven updates (e.g., marking a task approved/rejected, reassigning a task).

11) Cancellation & terminal outcomes

Method: CancelAsync(...) — writes a comment history entry, cancels all active tasks, fires Cancel, then saves.
Finalization (Completed/Cancelled) triggers OnWorkflowCompletedAsync/OnWorkflowCancelledAsync where you set WorkflowContext.Outcome and optional history description.

12) History logging (what’s recorded, when)

Where it happens:

Start/Complete/Cancel entries in WorkflowBase transition hooks.

TaskCreated in UserTaskActivity.ExecuteAsync.

Per‑action (approve/reject/delegate) in concrete activities (e.g., ApprovalTaskActivity).