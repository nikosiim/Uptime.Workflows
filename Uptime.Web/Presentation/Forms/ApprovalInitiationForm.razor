@page "/approval-initiation/{templateId:int}/{documentId:int}"
@inherits WorkflowInitForm<ApprovalInitFormModel>

<MudPaper Class="pa-4" Elevation="0" Style="max-width:800px;">
    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudText Typo="Typo.h5">@FormModel.TemplateName</MudText>
    </MudPaper>

    <MudForm @ref="Form" Spacing="1">
        <MudTextField T="string" Label="Assigned To" Variant="Variant.Outlined" @bind-Value="FormModel.AssignedTo" Placeholder="Comma-separated usernames" />
        <MudTextField T="string" Label="Task" Variant="Variant.Outlined" @bind-Value="FormModel.TaskDescription" Lines="4" />
        <MudDatePicker Label="Due Date" Variant="Variant.Outlined" @bind-Date="FormModel.DueDate" DateFormat="dd.MM.yyyy" />
    </MudForm>

    <MudStack Row="true" Class="mt-4" Justify="Justify.FlexStart">
        <MudButton Variant="Variant.Filled" OnClick="StartWorkflow" Color="Color.Primary" Disabled="@_isDisabled">Start</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Error">Cancel</MudButton>
    </MudStack>
</MudPaper>

@code
{
    private bool _isDisabled;

    protected override async Task StartWorkflow()
    {
        await base.StartWorkflow();

        _isDisabled = true;

        var storage = new Dictionary<string, string?>();

        storage.SetValue(GlobalConstants.TaskStorageKeys.TaskDescription, FormModel.TaskDescription);
        storage.SetValueAsDateTime(GlobalConstants.TaskStorageKeys.TaskDueDate, FormModel.DueDate);
        storage.SetValueAsList(GlobalConstants.TaskStorageKeys.TaskExecutors, [FormModel.AssignedTo!]);

        var command = new StartWorkflowCommand
        {
            WorkflowTemplateId = TemplateId,
            DocumentId = DocumentId,
            Originator = "SystemAccount",
            Storage = storage
        };

        await Mediator.Send(command);

        _isDisabled = false;

        Navigation.NavigateTo("/contracts");
    }
}
