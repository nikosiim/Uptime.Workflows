@page "/library-workflow/{listId:int}/{documentId:int}"

@inject IMediator Mediator
@inject ISnackbar Snackbar


@if (_loading)
{
    <MudProgressCircular Indeterminate="true" Size="Size.Small" />
}
else
{
    <MudContainer>
        <MudPaper Elevation="0" Outlined="false" Class="mb-6">
            <LibraryWorkflowTemplates ViewModel="_templatesViewModel" />
            <MudDivider />
        </MudPaper>
        <MudPaper Elevation="0" Outlined="false" Class="my-6">
            <LibraryWorkflowOverview ViewModel="_workflowsViewModel" />
        </MudPaper>
    </MudContainer>
}


@code {
    private bool _loading;
    private TemplatesViewModel? _templatesViewModel;
    private WorkflowsViewModel? _workflowsViewModel;

    [Parameter] public int ListId { get; set; }
    [Parameter] public int DocumentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        try
        {
            List<DocumentWorkflowDto> workflows = await Mediator.Send(new GetDocumentWorkflowsQuery(DocumentId));
            List<WorkflowTemplateDto> templates = await Mediator.Send(new GetLibraryWorkflowTemplatesQuery(ListId));

            PopulateViewModels(workflows, templates);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message);
        }

        _loading = false;
    }

    private void PopulateViewModels(List<DocumentWorkflowDto> workflows, List<WorkflowTemplateDto> templates)
    {
        _workflowsViewModel = new WorkflowsViewModel
        {
            ActiveInstances = workflows.Where(w => w.Status is not (WorkflowStatus.Completed or WorkflowStatus.Cancelled)).ToList(),
            CompletedInstances = workflows.Where(w => w.Status is WorkflowStatus.Completed or WorkflowStatus.Cancelled).ToList()
        };

        _templatesViewModel = new TemplatesViewModel
        {
            DocumentId = DocumentId,
            Templates = templates.Where(t => _workflowsViewModel.ActiveInstances.All(w => w.TemplateId != t.Id)).ToList()
        };
    }
}