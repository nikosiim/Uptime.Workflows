@page "/workflows/{listId:int}/{documentId:int}"

@inject IMediator Mediator
@inject ISnackbar Snackbar

@if (_loading)
{
    <MudProgressCircular Indeterminate="true" Size="Size.Small" />
}
else
{
    <WorkflowTemplates DocumentId="@DocumentId" ViewModel="_allowedTemplates" />
    <MudDivider />
    <LibraryWorkflows DocumentId="@DocumentId" ActiveInstances="_runningWorkflows" CompletedInstances="_completedWorkflows" />
}

@code {
    [Parameter] public int ListId { get; set; }
    [Parameter] public int DocumentId { get; set; }

    private bool _loading;

    private List<DocumentWorkflow>? _completedWorkflows;
    private List<DocumentWorkflow>? _runningWorkflows;
    private List<WorkflowTemplate>? _allowedTemplates;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        try
        {
            List<DocumentWorkflow> workflows = await Mediator.Send(new GetDocumentWorkflowsQuery(DocumentId));
            List<WorkflowTemplate> templates = await Mediator.Send(new GetLibraryWorkflowTemplatesQuery(ListId));

            PopulateViewModels(workflows, templates);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message);
        }

        _loading = false;
    }

    private void PopulateViewModels(List<DocumentWorkflow> workflows, List<WorkflowTemplate> templates)
    {
        _runningWorkflows = workflows.Where(w => w.Status is WorkflowStatus.NotStarted or WorkflowStatus.InProgress).ToList();
        _completedWorkflows = workflows.Where(w => w.Status is WorkflowStatus.Completed or WorkflowStatus.Cancelled).ToList();

        _allowedTemplates = templates.Where(t => _runningWorkflows.All(w => w.TemplateId != t.Id)).ToList();
    }
}