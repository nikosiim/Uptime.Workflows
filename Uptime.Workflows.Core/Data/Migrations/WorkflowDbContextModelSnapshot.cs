// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uptime.Workflows.Core.Data;

#nullable disable

namespace Uptime.Workflows.Core.Data.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    partial class WorkflowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("UptimeAPI")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Documents", "UptimeAPI");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Lauri Saar",
                            Description = "Sofia Kuperštein",
                            IsDeleted = false,
                            LibraryId = 1,
                            Title = "Teabenõue"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Riin Koppel",
                            Description = "Vello Lauri",
                            IsDeleted = false,
                            LibraryId = 1,
                            Title = "LISA_13.01.2025_7-4.2_277-3"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Jana Pärn",
                            Description = "SK_25.02.2025_9-11_25_59-4",
                            IsDeleted = false,
                            LibraryId = 2,
                            Title = "Pöördumine"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Markus Lepik",
                            Description = "AS GoTravel",
                            IsDeleted = false,
                            LibraryId = 1,
                            Title = "LEPING_AS GoTravel_18.12.2024_7-4.2_281"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Emma Carter",
                            Description = "Fifth document",
                            IsDeleted = false,
                            LibraryId = 2,
                            Title = "IdeaLog"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Marta Laine",
                            Description = "Rethinkers OÜ",
                            IsDeleted = false,
                            LibraryId = 1,
                            Title = "LEPING_14.02.2025_7-4.2_293"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Klient Kaks",
                            Description = "Rethinkers OÜ",
                            IsDeleted = false,
                            LibraryId = 2,
                            Title = "FastSummary"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Viljar Laine",
                            Description = "PZU Kindlustus",
                            IsDeleted = false,
                            LibraryId = 1,
                            Title = "2024 inventuuri lõppakt"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Signe Kask",
                            Description = "Riigi IKT Keskus",
                            IsDeleted = false,
                            LibraryId = 2,
                            Title = "Intervjuu tervisekassaga"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Anton Rebane",
                            Description = "Kaitseministeerium",
                            IsDeleted = false,
                            LibraryId = 2,
                            Title = "Juurdepääsupiirangu muutumine"
                        });
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Libraries", "UptimeAPI");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Lepingud"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Kirjavahetus"
                        });
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.OutboundNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EndpointPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("LastError")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTimeOffset>("OccurredAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhaseId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ResponseBody")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTimeOffset?>("SentAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SourceSiteUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaskGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UniqueKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc");

                    b.HasIndex("PhaseId");

                    b.HasIndex("TaskGuid");

                    b.HasIndex("UniqueKey")
                        .IsUnique();

                    b.HasIndex("WorkflowTaskId");

                    b.HasIndex("WorkflowId", "EventType", "Status");

                    b.ToTable("OutboundNotifications", "UptimeAPI");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitiatedByPrincipalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Outcome")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StorageJson")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("InitiatedByPrincipalId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("Workflows", "UptimeAPI");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Occurred")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerformedByPrincipalId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformedByPrincipalId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowHistories", "UptimeAPI");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowPrincipal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkflowPrincipals", "UptimeAPI");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "klient1@example.com",
                            ExternalId = "S-1-5-21-10001",
                            Name = "Klient Üks",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "klient2@example.com",
                            ExternalId = "S-1-5-21-10002",
                            Name = "Klient Kaks",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "klient3@example.com",
                            ExternalId = "S-1-5-21-10003",
                            Name = "Klient Kolm",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Email = "klient4@example.com",
                            ExternalId = "S-1-5-21-10004",
                            Name = "Klient Neli",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "klient5@example.com",
                            ExternalId = "S-1-5-21-10005",
                            Name = "Klient Viis",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            Email = "marika.oja@example.com",
                            ExternalId = "S-1-5-21-10006",
                            Name = "Marika Oja",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            Email = "jana.parn@example.com",
                            ExternalId = "S-1-5-21-10007",
                            Name = "Jana Pärn",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            Email = "piia.saar@example.com",
                            ExternalId = "S-1-5-21-10008",
                            Name = "Piia Saar",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            Email = "urve.oja@example.com",
                            ExternalId = "S-1-5-21-10009",
                            Name = "Urve Oja",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 10,
                            Email = "peeter.sepp@example.com",
                            ExternalId = "S-1-5-21-10010",
                            Name = "Peeter Sepp",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            Email = "markus.lepik@example.com",
                            ExternalId = "S-1-5-21-10011",
                            Name = "Markus Lepik",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 12,
                            Email = "marta.laine@example.com",
                            ExternalId = "S-1-5-21-10012",
                            Name = "Marta Laine",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 13,
                            Email = "anton.rebane@example.com",
                            ExternalId = "S-1-5-21-10013",
                            Name = "Anton Rebane",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            Email = "signe.kask@example.com",
                            ExternalId = "S-1-5-21-10014",
                            Name = "Signe Kask",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 15,
                            Email = "riin.koppel@example.com",
                            ExternalId = "S-1-5-21-10015",
                            Name = "Riin Koppel",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 16,
                            Email = "lauri.saar@example.com",
                            ExternalId = "S-1-5-21-10016",
                            Name = "Lauri Saar",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 17,
                            Email = "viljar.laine@example.com",
                            ExternalId = "S-1-5-21-10017",
                            Name = "Viljar Laine",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 18,
                            Email = "kristina.kroon@example.com",
                            ExternalId = "S-1-5-21-10018",
                            Name = "Kristina Kroon",
                            Source = "Windows",
                            Type = 0
                        },
                        new
                        {
                            Id = 19,
                            Email = "system@example.srv",
                            ExternalId = "S-1-5-21-10000",
                            Name = "System",
                            Source = "Windows",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedByPrincipalId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedToPrincipalId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InternalStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhaseId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("StorageJson")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByPrincipalId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("TaskGuid")
                        .IsUnique();

                    b.HasIndex("AssignedToPrincipalId", "InternalStatus");

                    b.HasIndex("WorkflowId", "InternalStatus");

                    b.ToTable("WorkflowTasks", "UptimeAPI");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociationDataJson")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("WorkflowBaseId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("WorkflowTemplates", "UptimeAPI");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Document", b =>
                {
                    b.HasOne("Uptime.Workflows.Core.Data.Library", "Library")
                        .WithMany("Documents")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.OutboundNotification", b =>
                {
                    b.HasOne("Uptime.Workflows.Core.Data.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uptime.Workflows.Core.Data.WorkflowTask", "WorkflowTask")
                        .WithMany()
                        .HasForeignKey("WorkflowTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowTask");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Workflow", b =>
                {
                    b.HasOne("Uptime.Workflows.Core.Data.Document", "Document")
                        .WithMany("Workflows")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uptime.Workflows.Core.Data.WorkflowPrincipal", "InitiatedByPrincipal")
                        .WithMany()
                        .HasForeignKey("InitiatedByPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uptime.Workflows.Core.Data.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany("Workflows")
                        .HasForeignKey("WorkflowTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("InitiatedByPrincipal");

                    b.Navigation("WorkflowTemplate");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowHistory", b =>
                {
                    b.HasOne("Uptime.Workflows.Core.Data.WorkflowPrincipal", "PerformedByPrincipal")
                        .WithMany()
                        .HasForeignKey("PerformedByPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uptime.Workflows.Core.Data.Workflow", "Workflow")
                        .WithMany("WorkflowHistories")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByPrincipal");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowTask", b =>
                {
                    b.HasOne("Uptime.Workflows.Core.Data.WorkflowPrincipal", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedByPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uptime.Workflows.Core.Data.WorkflowPrincipal", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uptime.Workflows.Core.Data.Workflow", "Workflow")
                        .WithMany("WorkflowTasks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("AssignedTo");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowTemplate", b =>
                {
                    b.HasOne("Uptime.Workflows.Core.Data.Library", "Library")
                        .WithMany("WorkflowTemplates")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Document", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Library", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("WorkflowTemplates");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.Workflow", b =>
                {
                    b.Navigation("WorkflowHistories");

                    b.Navigation("WorkflowTasks");
                });

            modelBuilder.Entity("Uptime.Workflows.Core.Data.WorkflowTemplate", b =>
                {
                    b.Navigation("Workflows");
                });
#pragma warning restore 612, 618
        }
    }
}
