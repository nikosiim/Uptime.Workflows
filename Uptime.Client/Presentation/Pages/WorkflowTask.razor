@page "/workflow-task/{taskGuid:guid}"
@inherits FluxorComponent

@inject IMediator Mediator
@inject IDispatcher Dispatcher
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IState<WorkflowState> WorkflowState

<MudText Typo="Typo.h5" Class="my-4">Tööülesande täitmine</MudText>

@if (_task != null)
{
    <MudPaper Elevation="1" Outlined="true" Class="pa-4 my-5">
        <div class="d-table" style="width:100%;">
            <div class="d-table-row">
                <div class="d-table-cell py-2">
                    <MudText><b>Dokument</b></MudText>
                </div>
                <div class="d-table-cell">
                    <MudText>@_task.Document</MudText>
                </div>
            </div>
            <div class="d-table-row">
                <div class="d-table-cell py-2">
                    <MudText><b>Määratud</b></MudText>
                </div>
                <div class="d-table-cell">
                    <MudText>@_task.AssignedTo</MudText>
                </div>
            </div>
            <div class="d-table-row">
                <div class="d-table-cell py-2">
                    <MudText><b>Ülesande andja</b></MudText>
                </div>
                <div class="d-table-cell">
                    <MudText>@_task.AssignedBy</MudText>
                </div>
            </div>
            <div class="d-table-row">
                <div class="d-table-cell py-2">
                    <MudText><b>Tähtaeg</b></MudText>
                </div>
                <div class="d-table-cell">
                    <MudText>@_task.DueDate?.ToLocalTime().ToString("d")</MudText>
                </div>
            </div>
            <div class="d-table-row">
                <div class="d-table-cell py-2">
                    <MudText><b>Ülesanne</b></MudText>
                </div>
                <div class="d-table-cell">
                    <MudText>@_task.Description</MudText>
                </div>
            </div>
        </div>
    </MudPaper>

    <MudPaper Elevation="0" Style="margin-bottom: 35px;">
        <MudStack Row="true" Spacing="3">

            @if (_task.InternalStatus == WorkflowTaskStatus.NotStarted)
            {
                if (IsButtonVisible(_task, ButtonAction.Signing))
                {
                    <MudButton Size="Size.Medium" Variant="Variant.Filled"
                    OnClick="@(() => OpenDialogAsync(_task, WorkflowEventType.TaskCompleted))">Allkirjasta</MudButton>
                }

                if (IsButtonVisible(_task, ButtonAction.Approval))
                {
                    <MudButton Size="Size.Medium" Variant="Variant.Filled"
                    OnClick="@(() => OpenDialogAsync(_task, WorkflowEventType.TaskCompleted))">Kinnita</MudButton>
                }

                if (IsButtonVisible(_task, ButtonAction.Delegation))
                {
                    <MudButton Size="Size.Medium" Variant="Variant.Filled"
                    OnClick="@(() => OpenDialogAsync(_task, WorkflowEventType.TaskDelegated))">Suuna ümber</MudButton>
                }

                if (IsButtonVisible(_task, ButtonAction.Rejection))
                {
                    <MudButton Size="Size.Medium" Variant="Variant.Filled"
                    OnClick="@(() => OpenDialogAsync(_task, WorkflowEventType.TaskRejected))">Lükka tagasi</MudButton>
                }
            }

            <MudButton Size="Size.Medium" Variant="Variant.Filled" OnClick="@(() => OnCancelled(_task.WorkflowId))">Loobu</MudButton>
        </MudStack>
    </MudPaper>

    <MudPaper Elevation="0" Outlined="true" Class="mb-4">
        <MudExpansionPanels Outlined="true" Elevation="0">
            <MudExpansionPanel HideIcon="true">
                <TitleContent>
                    <div class="d-flex">
                        <MudText Class="mt-1">Töövoo ajalugu</MudText>
                        <MudBadge Content="@WorkflowState.Value.WorkflowHistoryQuery.Result.Value?.Count" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                            <MudIcon Icon="@Icons.Material.Filled.History" Color="Color.Default" />
                        </MudBadge>
                    </div>
                </TitleContent>
                <ChildContent>
                    <WorkflowPageHistory ShowTitle="false" />
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>

    <MudPaper Elevation="0" Outlined="true">
        <MudExpansionPanels Outlined="true" Elevation="0">
            <MudExpansionPanel Text="Seotud töövood" MaxHeight="1000">

            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
}

@code {
    private WorkflowTaskDetails? _task;

    [Parameter] public Guid TaskGuid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (_task != null)
        {
            Dispatcher.Dispatch(new LoadWorkflowHistoryAction(_task.WorkflowId));
        }

        Result<WorkflowTaskDetails> result = await Mediator.Send(new GetWorkflowTaskQuery(TaskGuid));
        if (result.Succeeded)
        {
            _task = result.Value;
        }
    }

    private void OnCancelled(int workflowId)
    {
        Navigation.NavigateTo($"/{PageRoutes.Workflow}/{workflowId}");
    }

    private bool IsButtonVisible(WorkflowTaskDetails task, string buttonName)
    {
        return WorkflowState.Value.IsTaskButtonVisible(task, buttonName);
    }

    private async Task OpenDialogAsync(WorkflowTaskDetails task, WorkflowEventType eventType)
    {
        var parameters = new DialogParameters<TaskCompletionDialog>
        {
            { x => x.TaskGuid, task.TaskGuid },
            { x => x.Document, task.Document },
            { x => x.EventType, eventType }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        IDialogReference dialog = await DialogService.ShowAsync<TaskCompletionDialog>("Tööülesande lõpetamine", parameters, options);

        DialogResult? result = await dialog.Result;
        if (result?.Canceled == false)
        {
            OnCancelled(task.WorkflowId);
        }
    }
}