@inject IUserService UserService
@inject IMediator Mediator

<MudDialog>
    <TitleContent>@MudDialog.Title</TitleContent>
    <DialogContent>
        <MudForm @ref="Form">
            <MudSelect T="string" Label="Kinnitajad" Variant="Variant.Outlined" Placeholder="Muuda kinnitajaid"
            @bind-SelectedValues="_selectedUsers" MultiSelection="true">
                @foreach (User user in UserService.GetUsers())
                {
                    <MudSelectItem T="string" Value="@user.Sid">@user.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="UpdateWorkflow">Salvesta</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">Loobu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    protected MudForm Form = null!;
    private IEnumerable<string> _selectedUsers = [];

    private ApprovalModificationContext Context { get; set; } = new() { ApprovalTasks = [] };

    [Parameter] public WorkflowDetails WorkflowDetails { get; set; } = null!;
    [Parameter] public string ModificationContext { get; set; } = null!;

    [CascadingParameter]
    protected IMudDialogInstance MudDialog { get; set; } = null!;

    protected override void OnInitialized()
    {
        var context = JsonSerializer.Deserialize<ApprovalModificationContext>(ModificationContext);
        if (context != null)
        {
            Context = context;
            _selectedUsers = context.ApprovalTasks.Select(x => x.AssignedTo).ToList();
        }
    }

    protected virtual async Task UpdateWorkflow()
    {
        await Form.Validate();

        if (Form.IsValid)
        {
            List<string> existingUserNames = Context.ApprovalTasks.Select(t => t.AssignedTo).ToList();
            List<string> removedUsers = existingUserNames.Except(_selectedUsers).ToList();

            List<string> addedUsers = _selectedUsers.Except(existingUserNames).ToList();

            Context.ApprovalTasks.RemoveAll(task => removedUsers.Contains(task.AssignedTo));

            foreach (string newUser in addedUsers)
            {
                Context.ApprovalTasks.Add(new ApprovalTask
                {
                    AssignedTo = newUser,
                    TaskGuid = Guid.Empty.ToString()
                });
            }

            ModificationContext = JsonSerializer.Serialize(Context);

            Result<bool> result = await Mediator.Send(new ModifyWorkflowCommand(WorkflowDetails.Id, ModificationContext));
            MudDialog.Close(DialogResult.Ok(result.Succeeded));
        }
    }
    
    protected virtual void Cancel()
    {
        MudDialog.Cancel();
    }
}