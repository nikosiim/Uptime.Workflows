@inject IMediator Mediator
@inject IUserService UserService
@inject IState<WorkflowState> WorkflowState

<MudDialog>
    <TitleContent>@MudDialog.Title</TitleContent>
    <DialogContent>
        <MudText Typo="Typo.subtitle1">Tööülesande täitmine</MudText>
        @if (EventType == WorkflowEventType.TaskDelegated)
        {
            <MudSelect T="string" Label="Ülesande saaja" Variant="Variant.Outlined" Placeholder="Vali kasutaja" @bind-Value="_delegatedUser">
                @foreach (User user in UserService.GetUsers())
                {
                    <MudSelectItem T="string" Value="@user.Sid">@user.Name</MudSelectItem>
                }
            </MudSelect>
        }
        <MudTextField T="string" Label="Kommentaar" Variant="Variant.Outlined" @bind-Value="_comment" Lines="5" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnSaveClick">Salvesta</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="OnCancelClick">Loobu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string? _comment;
    private string? _delegatedUser;

    [Parameter] public Guid TaskGuid { get; set; }
    [Parameter] public string? Document { get; set; }
    [Parameter] public WorkflowEventType EventType { get; set; }

    [CascadingParameter] 
    protected IMudDialogInstance MudDialog { get; set; } = null!;

    protected virtual async Task OnSaveClick()
    {
        var input = new Dictionary<string, string?>();

        User taskEditor = User.OrSystemAccount(WorkflowState.Value.CurrentUser);
        
        input[StorageKeys.Payload.Approval.TaskComment] = _comment;

        if (EventType == WorkflowEventType.TaskDelegated)
        {
            input[StorageKeys.Payload.Approval.TaskDelegatedToSid] = _delegatedUser;
        }

        var command = new AlterTaskCommand
        {
            Executor = taskEditor,
            TaskGuid = TaskGuid,
            Action = EventType,
            Input = input
        };

        Result<bool> result = await Mediator.Send(command);
        MudDialog.Close(DialogResult.Ok(result.Succeeded));
    }

    protected virtual void OnCancelClick()
    {
        MudDialog.Cancel();
    }
}