@page "/signing-initiation/{templateId:int}/{documentId:int}"

@inherits WorkflowInitForm<SigningInitFormModel>
@inject IState<WorkflowState> WorkflowState

<MudPaper Class="pa-4" Elevation="0" Style="max-width:800px;">
    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudText Typo="Typo.h4">@FormModel.TemplateName</MudText>
    </MudPaper>

    <MudForm @ref="Form" Spacing="1">
        <MudTextField T="string" Label="Ülesande saaja" Variant="Variant.Outlined" @bind-Value="FormModel.Signer" Placeholder="Comma-separated usernames"/>
        <MudTextField T="string" Label="Ülesanne" Variant="Variant.Outlined" @bind-Value="FormModel.TaskDescription" Lines="4" />
        <MudNumericField Label="Ülesande täitmise aeg" Variant="Variant.Outlined" @bind-Value="FormModel.DueDays" />
    </MudForm>

    <MudStack Row="true" Class="mt-4" Justify="Justify.FlexStart">
        <MudButton Variant="Variant.Filled" OnClick="StartWorkflow" Color="Color.Primary" Disabled="@_isDisabled">Alusta</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Error">Loobu</MudButton>
    </MudStack>
</MudPaper>


@code
{
    private bool _isDisabled;

    protected override async Task StartWorkflow()
    {
        await base.StartWorkflow();

        _isDisabled = true;

        var storage = new Dictionary<string, string?>();

        storage.SetValue(GlobalConstants.WorkflowStorageKeys.AssociationName, FormModel.TemplateName); 
        storage.SetValue(GlobalConstants.TaskStorageKeys.TaskDescription, FormModel.TaskDescription);
        storage.SetValue(GlobalConstants.TaskStorageKeys.TaskDueDays, FormModel.DueDays.ToString());
        storage.SetValueAsList(GlobalConstants.TaskStorageKeys.TaskSigners, [FormModel.Signer!]);

        string originator = User.GetNameOrSystemAccount(WorkflowState.Value.CurrentUser);

        var command = new StartWorkflowCommand
        {
            WorkflowTemplateId = TemplateId,
            DocumentId = DocumentId,
                Originator = originator,
            Storage = storage
        };

        Result<bool> result = await Mediator.Send(command);
        if (!result.Succeeded)
        {
            Snackbar.Add("Töövoo käivitamine ebaõnnestus");
        }

        _isDisabled = false;

        Navigation.NavigateTo($"/library-workflow/1/{DocumentId}");
    }
}