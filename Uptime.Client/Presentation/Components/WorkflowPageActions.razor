@inherits FluxorComponent
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService DialogService
@inject IState<WorkflowState> WorkflowState

@if (WorkflowDetails != null && WorkflowDetails.IsActive)
{
    <MudStack Spacing="4">
        <MudStack Spacing="0">
            <MudLink>Töövoo muutmine</MudLink>
            <MudText Typo="Typo.subtitle2">Käimasoleva töövoo muutmine</MudText>
        </MudStack>

        <MudStack Spacing="0">
            <MudLink OnClick="@(() => OnCancelClick(WorkflowDetails.Id))">Katkesta töövoog</MudLink>
            <MudText Typo="Typo.subtitle2">Töövoo katkestamisel aktiivsed ülesanded katkestatakse ja uusi ülesandeid ei lisada.</MudText>
        </MudStack>

        @if (WorkflowState.Value.CurrentUser.IsAdmin)
        {
            <MudStack Spacing="0">
                <MudLink OnClick="@(() => OnDeleteClick(WorkflowDetails.Id))">Kustuta töövoog</MudLink>
                <MudText Typo="Typo.subtitle2">Töövoo kustutamisel aktiivsed ülesanded katkestatakse ja uusi ülesandeid ei lisada.</MudText>
            </MudStack>
        }
    </MudStack>
}

@code
{
    private WorkflowDetails? WorkflowDetails 
        => WorkflowState.Value.WorkflowDetailsQuery.Result.Succeeded 
            ? WorkflowState.Value.WorkflowDetailsQuery.Result.Value 
            : null;

    [Parameter]
    public EventCallback PageUpdated { get; set; }
    
    private async Task OnCancelClick(int workflowId)
    {
        var parameters = new DialogParameters<CommentDialog>
        {
            { x => x.ButtonText, "Katkesta töövoog" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        IDialogReference dialog = await DialogService.ShowAsync<CommentDialog>("Töövoo katkestamine", parameters, options);
        DialogResult? dialogResult = await dialog.Result;

        if (dialogResult is { Canceled: false, Data: string comment })
        {
            var command = new CancelWorkflowCommand(workflowId, $"Töövoog tühistatud kommentaariga: {comment}");

            Result<bool> result = await Mediator.Send(command);
            if (!result.Succeeded)
            {
                Snackbar.Add("Töövoo katkestamine ebaõnnestus", Severity.Error);
                return;
              
            }
            await PageUpdated.InvokeAsync();
        }
    }

    private async Task OnDeleteClick(int workflowId)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Oled kindel, et soovid antud töövoo kustutada?" },
            { x => x.ButtonText, "Jah" },
            { x => x.Color, Color.Warning }
        };

        IDialogReference dialog = await DialogService.ShowAsync<ConfirmationDialog>("Töövoo kustutamine", parameters);
        DialogResult? dialogResult = await dialog.Result;

        if (dialogResult is { Canceled: false })
        {
            var command = new DeleteWorkflowCommand(workflowId);

            Result<bool> result = await Mediator.Send(command);
            if (!result.Succeeded)
            {
                Snackbar.Add("Töövoo katkestamine ebaõnnestus", Severity.Error);
                return;
              
            }
            await PageUpdated.InvokeAsync();
        }
    }
}