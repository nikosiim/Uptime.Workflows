@inherits FluxorComponent
@inject IDialogService DialogService
@inject IState<WorkflowState> WorkflowState

@if (WorkflowDetails != null && WorkflowDetails.IsActive)
{
    <MudStack Spacing="4">
        <MudStack Spacing="0">
            <MudLink>Töövoo muutmine</MudLink>
            <MudText Typo="Typo.subtitle2">Käimasoleva töövoo muutmine</MudText>
        </MudStack>

        <MudStack Spacing="0">
            <MudLink OnClick="@(() => OnCancelClick(WorkflowDetails.Id))">Katkesta töövoog</MudLink>
            <MudText Typo="Typo.subtitle2">Töövoo katkestamisel aktiivsed ülesanded katkestatakse ja uusi ülesandeid ei lisada.</MudText>
        </MudStack>
        
        @if (WorkflowState.Value.CurrentUser.IsAdmin)
        {
            <MudStack Spacing="0">
                <MudLink>Kustuta töövoog</MudLink>
                <MudText Typo="Typo.subtitle2">Töövoo kustutamisel aktiivsed ülesanded katkestatakse ja uusi ülesandeid ei lisada.</MudText>
            </MudStack>
        }
    </MudStack>
}

@code
{
    private WorkflowDetails? WorkflowDetails 
        => WorkflowState.Value.WorkflowDetailsQuery.Result.Succeeded 
            ? WorkflowState.Value.WorkflowDetailsQuery.Result.Value 
            : null;

    [Parameter]
    public EventCallback WorkflowCanceled { get; set; }

    private async Task OnCancelClick(int workflowId)
    {
        var parameters = new DialogParameters
        {
            { DialogParams.WorkflowId, workflowId }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        IDialogReference dialogReference = await DialogService.ShowAsync<CancellationDialog>("Töövoo katkestamine", parameters, options);

        DialogResult? dialogResult = await dialogReference.Result;
        if (dialogResult?.Canceled == false)
        {
            await WorkflowCanceled.InvokeAsync();
        }
    }
}