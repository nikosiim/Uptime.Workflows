@inject IDialogService DialogService
@inject IState<WorkflowState> WorkflowState

<MudTable Items="@ViewModel" Hover="true" Bordered="false" Striped="false" Dense="true" Outlined="true">
    <ToolBarContent>
        <MudPaper Class="d-flex justify-space-between flex-grow-1 align-top gap-4" Elevation="0">
            <MudText Typo="Typo.h5">Töövoo sätted</MudText>
            <MudStack Row="true">

                @if (WorkflowState.Value.WorkflowDefinitionsQuery.Result.Succeeded)
                {
                    <MudSelect T="string" Label="Workflow Type" @bind-Value="_selectedWorkflowBaseId" Style="min-width: 200px;">
                        @foreach (WorkflowDefinition workflow in WorkflowState.Value.WorkflowDefinitionsQuery.Result.Value ?? [])
                        {
                            <MudSelectItem T="string" Value="@workflow.Id">@workflow.DisplayName</MudSelectItem>
                        }
                    </MudSelect>
                }

                <MudButton Variant="Variant.Filled" Disabled="@string.IsNullOrWhiteSpace(_selectedWorkflowBaseId)" OnClick="@(async () => await AssignNewTemplate(_selectedWorkflowBaseId))">
                    Assign New Template
                </MudButton>
            </MudStack>
        </MudPaper>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Töövoo nimi</MudTh>
        <MudTh>Guid</MudTh>
        <MudTh>Loodud</MudTh>
        <MudTh>Tegevused</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.WorkflowBaseId</MudTd>
        <MudTd>@context.Created</MudTd>
        <MudTd>
            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="() => EditTemplate(context)">Muuda</MudButton>
            <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteTemplate(context.Id)">Kustuta</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string? _selectedWorkflowBaseId;

    [Parameter, EditorRequired]
    public List<WorkflowTemplate> ViewModel { get; set; } = null!;

    [Parameter] public EventCallback<int> OnTemplateDeleted { get; set; }

    private async Task AssignNewTemplate(string? workflowBaseId)
    {
        if (!string.IsNullOrWhiteSpace(workflowBaseId))
        {
            await ShowAssociationDialog(workflowBaseId, new DialogParameters(), "Lisa");
        }
    }

    private async Task EditTemplate(WorkflowTemplate template)
    {
        var parameters = new DialogParameters { { DialogParams.TemplateId, template.Id } };

        await ShowAssociationDialog(template.WorkflowBaseId, parameters, "Muuda");
    }

    private async Task DeleteTemplate(int templateId)
    {
        await OnTemplateDeleted.InvokeAsync(templateId);
    }

    private async Task ShowAssociationDialog(string workflowBaseId, DialogParameters parameters, string action)
    {
        WorkflowDefinition definition = WorkflowState.Value.WorkflowDefinitionsQuery.Result.Value!.First(x => x.Id == workflowBaseId);
        if (definition.FormsConfiguration?.AssociationDialogType == null)
        {
            throw new Exception($"No association dialog defined for workflow {definition.Name}");
        }

        parameters.Add(DialogParams.WorkflowDefinition, definition);
        parameters.Add(DialogParams.LibraryId, 1);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync(definition.FormsConfiguration!.AssociationDialogType, $"{action} {definition.DisplayName}", parameters, options);
    }
}